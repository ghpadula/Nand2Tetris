// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction,b=ALUout,sel=instruction[15],out=MuxOut);
    Not(in=instruction[15],out=CIntruction);
    Or(a=CIntruction,b=instruction[5],out=loadAregister);
    ARegister(in=MuxOut,load=loadAregister,out=AOut,out[0..14]=addressM);

    Mux16(a=AOut,b=inM,sel=instruction[12],out=MuxOut2);

    And(a=instruction[15],b=instruction[4],out=loadDregister);
    DRegister(in=ALUout,load=loadDregister,out=BOut);

    ALU(x=BOut, y=MuxOut2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=ZR, ng=NG);

    Mux(a=instruction[3],b=false,sel=CIntruction,out=writeM);   
    Or16(a=false,b=ALUout,out=outM); 


    //pc Jump
    Not(in=ZR,out = notZR);
    Not(in=NG,out = notNG);
    And(a=notNG,b=notZR,out=out001);
    And(a=ZR,b=notNG,out=out010);
    And(a=notZR,b=NG,out=out100);
    Xor(a=ZR,b=NG,out=out110);

    Mux8Way16(a[0]=false, b[0]=out001, c[0]=out010, d[0]=notNG, e[0]=out100, f[0]=notZR, g[0]=out110, h[0]=true, sel=instruction[0..2], out[0]=load1);    
    Mux(a=load1,b=false,sel=CIntruction,out=load);
    Not(in=load,out=inc);
    PC(in=AOut,inc=inc,load=load,reset=reset,out[0..14]=pc);    
}